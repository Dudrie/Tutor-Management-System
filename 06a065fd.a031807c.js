(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{112:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function b(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),s=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,c=b(e,["components","mdxType","originalType","parentName"]),p=s(n),d=a,m=p["".concat(o,".").concat(d)]||p[d]||u[d]||i;return n?r.a.createElement(m,l(l({ref:t},c),{},{components:n})):r.a.createElement(m,l({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var b in t)hasOwnProperty.call(t,b)&&(l[b]=t[b]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},66:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return b})),n.d(t,"default",(function(){return s}));var a=n(3),r=n(7),i=(n(0),n(112)),o={id:"gh-workflows",title:"GitHub Workflows",sidebar_label:"GitHub Workflows"},l={unversionedId:"dev/gh-workflows",id:"dev/gh-workflows",isDocsHomePage:!1,title:"GitHub Workflows",description:"Introduction",source:"@site/docs/dev/workflows.md",slug:"/dev/gh-workflows",permalink:"/Tutor-Management-System/docs/dev/gh-workflows",editUrl:"https://github.com/Dudrie/Tutor-Management-System/edit/main/docs/docs/dev/workflows.md",version:"current",sidebar_label:"GitHub Workflows",sidebar:"dev",previous:{title:"Server API Documentation",permalink:"/Tutor-Management-System/docs/dev/server-doc"},next:{title:"Fork Repository",permalink:"/Tutor-Management-System/docs/dev/fork"}},b=[{value:"Introduction",id:"introduction",children:[]},{value:"Code Quality",id:"code-quality",children:[]},{value:"Unit Tests",id:"unit-tests",children:[]},{value:"Docker image test",id:"docker-image-test",children:[]},{value:"Build and push Docker image",id:"build-and-push-docker-image",children:[]},{value:"Deploy docs",id:"deploy-docs",children:[]}],c={toc:b};function s(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"introduction"},"Introduction"),Object(i.b)("p",null,"The repository comes with a few GitHub Workflows preconfigured.\nThis page contains a description for each workflow and a note on when it gets triggered.\nIf you want to fork the repository please refer to the ",Object(i.b)("a",{parentName:"p",href:"./fork"},"fork page"),"."),Object(i.b)("h2",{id:"code-quality"},"Code Quality"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Trigger"),Object(i.b)("th",{parentName:"tr",align:null},"Branches"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"Pull Request"),Object(i.b)("td",{parentName:"tr",align:null},"All")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"Push"),Object(i.b)("td",{parentName:"tr",align:null},"main, stable")))),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Required to merge pull request:")," Yes"),Object(i.b)("p",null,"This workflow has three jobs:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"Type Check Client"),": Checks if the client compiles and does not contain any type errors."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"Type Check Server"),": Checks if the server compiles and does not contain any type errors."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"Code Quality"),": Checks all projects inside this repository if their code complies to the code styles configured in this repository.")),Object(i.b)("h2",{id:"unit-tests"},"Unit Tests"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Trigger"),Object(i.b)("th",{parentName:"tr",align:null},"Branches"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"Pull Request"),Object(i.b)("td",{parentName:"tr",align:null},"All")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"Push"),Object(i.b)("td",{parentName:"tr",align:null},"main, stable")))),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Required to merge pull request:")," Yes"),Object(i.b)("p",null,"Runs the unit tests in the server."),Object(i.b)("h2",{id:"docker-image-test"},"Docker image test"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Trigger"),Object(i.b)("th",{parentName:"tr",align:null},"Branches"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"Pull Request"),Object(i.b)("td",{parentName:"tr",align:null},"main")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"Push"),Object(i.b)("td",{parentName:"tr",align:null},"main, stable")))),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Required to merge pull request:")," Yes"),Object(i.b)("p",null,"Creates a docker image and test if the server would start using this image.\nIf the image starts successfully the job checks if a PDF could be generated.\nThis is done because using puppeteer inside an alpine image might fail after package updates."),Object(i.b)("h2",{id:"build-and-push-docker-image"},"Build and push Docker image"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Trigger"),Object(i.b)("th",{parentName:"tr",align:null},"State"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"Release"),Object(i.b)("td",{parentName:"tr",align:null},"published")))),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Required to merge pull request:")," No"),Object(i.b)("p",null,"If a release is published (not drafted or updated) this job will create a new docker image.\nThe version used is the tag of the release.\nAfter the image is created it gets pushed to the ",Object(i.b)("a",{parentName:"p",href:"https://docs.github.com/en/packages/guides/about-github-container-registry"},"GitHub Container Registry")," associated with this repository."),Object(i.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(i.b)("div",{parentName:"div",className:"admonition-heading"},Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",{parentName:"h5",className:"admonition-icon"},Object(i.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Object(i.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Semantic version")),Object(i.b)("div",{parentName:"div",className:"admonition-content"},Object(i.b)("p",{parentName:"div"},"Make sure the version tag of your releases match the semantic versioning: ",Object(i.b)("inlineCode",{parentName:"p"},"major"),".",Object(i.b)("inlineCode",{parentName:"p"},"minor"),".",Object(i.b)("inlineCode",{parentName:"p"},"patch")))),Object(i.b)("h2",{id:"deploy-docs"},"Deploy docs"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Trigger"),Object(i.b)("th",{parentName:"tr",align:null},"Branches"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"Pull Request"),Object(i.b)("td",{parentName:"tr",align:null},"main")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"Push"),Object(i.b)("td",{parentName:"tr",align:null},"main")))),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Required to merge pull request:")," Yes"),Object(i.b)("p",null,"In a pull request made against the ",Object(i.b)("inlineCode",{parentName:"p"},"main")," branch one job of the workflow checks if this documentation could be build.\nDue to the second job being skipped in pull requests it shows so inside the CI box at the bottom of the pull request."),Object(i.b)("p",null,"Everytime something is ",Object(i.b)("strong",{parentName:"p"},"pushed")," to the ",Object(i.b)("inlineCode",{parentName:"p"},"main")," branch of the repository this documentation gets build with the second job.\nAfterwards it gets pushed to the corresponding GitHub pages branch of the repository.\nIf you push against the ",Object(i.b)("inlineCode",{parentName:"p"},"main")," branch of a fork the docs get updated inside the fork not the original repository."))}s.isMDXComponent=!0}}]);