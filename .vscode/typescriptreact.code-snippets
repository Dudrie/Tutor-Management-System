{
  // Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "React functional component": {
    "prefix": "react func comp",
    "description": "Creates a functional component",
    "body": [
      "import React from 'react';",
      "",
      "interface Props {",
      "\t",
      "}",
      "",
      "function ${TM_FILENAME_BASE}({}: Props): JSX.Element {",
      "\treturn (",
      "\t\t$0",
      "\t);",
      "}",
      "",
      "export default ${TM_FILENAME_BASE};",
      ""
    ]
  },
  "React functional component with route": {
    "prefix": "react func comp (with route params)",
    "description": "Creates a functional component with route params from react-router.",
    "body": [
      "import React from 'react';",
      "import { useParams } from 'react-router';",
      "",
      "interface RouteParams {",
      "\t",
      "}",
      "",
      "function $1(): JSX.Element {",
      "\tconst {} = useParams<RouteParams>();",
      "",
      "\treturn (",
      "\t\t$0",
      "\t);",
      "}",
      "",
      "export default $1;",
      ""
    ]
  },
  "MUI useStyles hook": {
    "prefix": "useStyles hook (MUI)",
    "description": "boilerplate code for the useStyles hook",
    "body": [
      "import { makeStyles, createStyles } from '@material-ui/core/styles';",
      "",
      "const useStyles = makeStyles((theme) =>",
      "\tcreateStyles({",
      "\t\t$0",
      "\t})",
      ");"
    ]
  },
  "useCallback": {
    "prefix": "useCallback",
    "description": "boilerplate for a useCallback usage (synchronous)",
    "body": "useCallback(($1) => {$0}, []);"
  },
  "useCallback (async)": {
    "prefix": "useCallback async",
    "description": "boilerplate for an async useCallback usage",
    "body": "useCallback(async ($1) => {$0}, []);"
  },
  "mongoose document": {
    "prefix": "mongoose document",
    "description": "boilerplate code for a document used in mongoose",
    "body": [
      "import { DocumentType, modelOptions, plugin, prop } from '@typegoose/typegoose';",
      "import { CollectionName } from '../../helpers/CollectionName';",
      "",
      "@modelOptions({ schemaOptions: { collection: CollectionName.${1/(.*)/${1:/upcase}/} } })",
      "export class ${1:Type}Model {",
      "\t$0",
      "}",
      "",
      "export type $1Document = DocumentType<$1Model>;",
      ""
    ]
  },
  "throws documentation": {
    "prefix": "@throws",
    "description": "Template for the @throws documentation in JSDoc",
    "body": "@throws `$1` - $0"
  }
}
