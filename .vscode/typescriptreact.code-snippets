{
  // Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "React functional component": {
    "prefix": "react func comp",
    "description": "Creates a functional component",
    "body": [
      "import React from 'react';",
      "",
      "interface Props {",
      "\t",
      "}",
      "",
      "function ${TM_FILENAME_BASE}({}: Props): JSX.Element {",
      "\treturn (",
      "\t\t$0",
      "\t);",
      "}",
      "",
      "export default ${TM_FILENAME_BASE};",
      ""
    ]
  },
  "React functional component with route": {
    "prefix": "react func comp (with route params)",
    "description": "Creates a functional component with route params from react-router.",
    "body": [
      "import React from 'react';",
      "import { useParams } from 'react-router';",
      "",
      "interface RouteParams {",
      "\t",
      "}",
      "",
      "function $1(): JSX.Element {",
      "\tconst {} = useParams<RouteParams>();",
      "",
      "\treturn (",
      "\t\t$0",
      "\t);",
      "}",
      "",
      "export default $1;",
      ""
    ]
  },
  "MUI useStyles hook": {
    "prefix": "useStyles hook (MUI)",
    "description": "boilerplate code for the useStyles hook",
    "body": [
      "import { makeStyles, createStyles } from '@material-ui/core/styles';",
      "",
      "const useStyles = makeStyles(theme =>",
      "\tcreateStyles({",
      "\t\t$0",
      "\t})",
      ");"
    ]
  },
  "mongoose document": {
    "prefix": "mongoose document",
    "description": "boilerplate code for a document used in mongoose",
    "body": [
      "import { DocumentType, modelOptions, plugin, prop } from '@typegoose/typegoose';",
      "import { CollectionName } from '../../helpers/CollectionName';",
      "",
      "@modelOptions({ schemaOptions: { collection: CollectionName.${1/(.*)/${1:/upcase}/} } })",
      "export class ${1:Type}Model {",
      "\t$0",
      "}",
      "",
      "export type $1Document = DocumentType<$1Model>;",
      ""
    ]
  },
  "express server": {
    "prefix": "express service",
    "description": "boilerplate code for a CRUD service",
    "body": [
      "import { DocumentNotFoundError } from '../../model/Errors';",
      "import { getIdOfDocumentRef } from '../../helpers/documentHelpers';",
      "",
      "class ${1:Type}Service {",
      "\tpublic async getAll$1s(): Promise<$1$0[]> {",
      "\t\tthrow new Error('[$1Service] -- Not implemented yet.');",
      "\t}",
      "",
      "\tpublic async create$1(dto: $1DTO): Promise<$1> {",
      "\t\tthrow new Error('[$1Service] -- Not implemented yet.');",
      "\t}",
      "",
      "\tpublic async update$1(id: string, dto: $1DTO): Promise<$1> {",
      "\t\tthrow new Error('[$1Service] -- Not implemented yet.');",
      "\t}",
      "",
      "\tpublic async delete$1(id: string): Promise<$1> {",
      "\t\tthrow new Error('[$1Service] -- Not implemented yet.');",
      "\t}",
      "",
      "\tpublic async get$1WithId(id: string): Promise<$1> {",
      "\t\tconst ${1/(.*)/${1:/downcase}/}: $1Document | null = await this.get$1DocumentWithId(id);",
      "",
      "\t\treturn this.get$1OrReject(${1/(.*)/${1:/downcase}/});",
      "\t}",
      "",
      "\tprivate async get$1DocumentWithId(id: string): Promise<$1Document> {",
      "\t\tthrow new Error('[$1Service] -- Not implemented yet.');",
      "\t}",
      "",
      "\tprivate async get$1OrReject(${1/(.*)/${1:/downcase}/}: $1Document | null): Promise<$1> {",
      "\t\tthrow new Error('[$1Service] -- Not implemented yet.');",
      "\t}",
      "",
      "\tprivate async reject$1NotFound(): Promise<any> {",
      "\t\treturn Promise.reject(new DocumentNotFoundError('$1 with that ID was not found.'));",
      "\t}",
      "}",
      "",
      "const ${1/(.*)/${1:/downcase}/}Service = new $1Service();",
      "",
      "export default ${1/(.*)/${1:/downcase}/}Service;",
      ""
    ]
  },
  "express router": {
    "prefix": "express router",
    "description": "boilerplate code for an express router file",
    "body": [
      "import Router from 'express-promise-router';",
      "import { Role } from 'shared/dist/model/Role';",
      "import { checkRoleAccess } from '../../middleware/AccessControl';",
      "",
      "const ${1:type}Router = Router();",
      "",
      "$1Router.get('/', ...checkRoleAccess(Role.ADMIN), async (req, res) => {",
      "\t$0",
      "});",
      "",
      "export default $1Router;",
      ""
    ]
  },
  "throws documentation": {
    "prefix": "@throws",
    "description": "Template for the @throws documentation in JSDoc",
    "body": "@throws `$1` - $0"
  }
}
